class Solution {
public:
void merge(vector<int>& arr,int low, int mid,int high){
    vector<int> temp;
    int left=low;
    int right=mid+1;
    while(left<=mid && right<=high){
        if(arr[left]<=arr[right]){
         temp.push_back(arr[left]);
         left++;
    }else{
        temp.push_back(arr[right]);
        right++;
    }

    }

    //left copid to temp if remaining
    while(left<=mid){
        temp.push_back(arr[left]);
        left++;
    }
    // right copied to temp if remaining
     while(right<=high){
        temp.push_back(arr[right]);
        right++;
    }
    //copy temp into arr
   for(int i=0; i<temp.size(); i++){
        arr[low]=temp[i];
        low++;
    }

}
   void ms(vector<int>& arr, int low, int high){
       if(low==high) return;
       int mid=(low+high)/2;
       ms(arr,low,mid);
       ms(arr,mid+1,high);
       merge(arr,low,mid,high);
   }
    vector<int> sortArray(vector<int>& nums) {
        int n=nums.size();
     ms(nums,0,n-1);
     return nums;
    }
};
